// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract MultiTransaction {
    address public owner;
    uint256 public totalDeposits;

    event Deposited(address indexed from, uint256 amount);
    event Withdrawn(address indexed to, uint256 amount);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    // Users can call this to send ETH (multiple times)
    function deposit() external payable {
        require(msg.value > 0, "Amount must be > 0");
        totalDeposits += msg.value;
        emit Deposited(msg.sender, msg.value);
    }

    // Fallback function (handles direct ETH transfers)
    receive() external payable {
        require(msg.value > 0, "Amount must be > 0");  // Same check as deposit()
        totalDeposits += msg.value;
        emit Deposited(msg.sender, msg.value);
    }

    // Owner can withdraw all ETH (or a specific amount)
    function withdraw(uint256 amount) external onlyOwner {
        require(amount <= address(this).balance, "Insufficient balance");
        payable(owner).transfer(amount);
        emit Withdrawn(owner, amount);
    }
}
